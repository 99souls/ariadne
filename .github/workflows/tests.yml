name: tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.25.1]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Clear Go mod cache
        run: go clean -modcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Workspace sync
        run: go work sync

      - name: Build modules
        run: |
          for m in engine cli tools/apireport; do
            echo "==> build $m";
            (cd $m && go build ./... ) || exit 1;
          done

      - name: Run tests (with unified coverage)
        run: |
          set -euo pipefail
          rm -f coverage.out
          first=1
          for m in engine cli tools/apireport; do
            echo "==> test $m";
            (cd $m && go test -race -covermode=atomic -coverprofile=coverage.tmp ./... )
            if [ $first -eq 1 ]; then
              cat $m/coverage.tmp > coverage.out
              first=0
            else
              tail -n +2 $m/coverage.tmp >> coverage.out
            fi
            rm $m/coverage.tmp
          done

      - name: Check test coverage summary
        run: |
          test -f coverage.out || { echo "coverage.out missing" >&2; exit 1; }
          go tool cover -func=coverage.out || { echo "cover tool parse failed" >&2; exit 1; }
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total test coverage: $COVERAGE%"
          # TODO: Re-enable coverage requirement when coverage improves
          # Currently at ~58%, target is 80%+
          # if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          #   echo "❌ Test coverage is below 80%"
          #   exit 1
          # else
          #   echo "✅ Test coverage is above 80%"
          # fi
