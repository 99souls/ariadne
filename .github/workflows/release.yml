name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.25

      - name: Clear Go mod cache
        run: go clean -modcache

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: go test -v ./...

      - name: Build binaries
        run: |
          # Create dist directory
          mkdir -p dist

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/ariadne-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/ariadne-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/ariadne-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/ariadne-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/ariadne-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o dist/ariadne-windows-arm64.exe .

      - name: Create archives
        run: |
          cd dist

          # Create tar.gz for Unix systems
          tar -czf ariadne-linux-amd64.tar.gz ariadne-linux-amd64
          tar -czf ariadne-linux-arm64.tar.gz ariadne-linux-arm64
          tar -czf ariadne-darwin-amd64.tar.gz ariadne-darwin-amd64
          tar -czf ariadne-darwin-arm64.tar.gz ariadne-darwin-arm64

          # Create zip for Windows
          zip ariadne-windows-amd64.zip ariadne-windows-amd64.exe
          zip ariadne-windows-arm64.zip ariadne-windows-arm64.exe

      - name: Generate checksums
        run: |
          cd dist
          sha256sum *.tar.gz *.zip > checksums.txt
          cat checksums.txt

      - name: Extract release notes
        id: extract_release_notes
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

          # Extract release notes from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            awk -v tag="$TAG" '
              /^## / {
                if (found) exit
                if ($0 ~ tag) found=1
                next
              }
              found && /^## / { exit }
              found { print }
            ' CHANGELOG.md > release_notes.txt
          else
            echo "Release $TAG" > release_notes.txt
            echo "" >> release_notes.txt
            echo "Automated release created from tag $TAG" >> release_notes.txt
          fi

          echo "Release notes:"
          cat release_notes.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.extract_release_notes.outputs.tag }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release info
        run: |
          echo "üéâ Release ${{ steps.extract_release_notes.outputs.tag }} created successfully!"
          echo "üì¶ Binaries available for:"
          echo "  ‚Ä¢ Linux (amd64, arm64)"
          echo "  ‚Ä¢ macOS (amd64, arm64)"  
          echo "  ‚Ä¢ Windows (amd64, arm64)"
          echo "üîê SHA256 checksums included for verification"

  docker:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
